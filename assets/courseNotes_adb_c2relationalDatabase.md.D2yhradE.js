import{_ as a,c as l,o as i,a4 as e}from"./chunks/framework.BBKq6QKo.js";const t="/adb/chap2/549e778bb6a5250ed0e48366d3e23a3b.png",n="/adb/chap2/adc394a7c6bffb3bd32b05297165725f.png",s="/adb/chap2/d324d33f22e31f43c779e13ce1eb0c84.png",p="/adb/chap2/733345d732d8acd58045b8cfd04699f8.png",o="/adb/chap2/4752c3595b604973c2c525ef643f6b84.png",r="/adb/chap2/fbc08dce2e889b90a9ea423a134885fc.png",c="/adb/chap2/0f3c90179a991799614a792ca90b3e82.png",g="/adb/chap2/33fbb1b04082d67cd5e1bf118e0868b3.png",d="/adb/chap2/96336e4eb7bac5a41172e4ebd0dafce1.png",h="/adb/chap2/c67ea6053e56691b423b0aec91ccdf06.png",u="/adb/chap2/145fbf5ca7e5ef93b1323f767230db6b.png",b="/adb/chap2/c7207ced7768d1c4310cb7d2512ea763.png",m="/adb/chap2/95a240af53381ac40ee2801d7ce5af0c.png",_="/adb/chap2/04952b53f7b30c79ef438c4598bbf5e0.png",f="/adb/chap2/bedc9bb61a8ed199d9067f4ae88951a8.png",N=JSON.parse('{"title":"关系数据库回顾","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"courseNotes/adb/c2relationalDatabase.md","filePath":"courseNotes/adb/c2relationalDatabase.md"}'),q={name:"courseNotes/adb/c2relationalDatabase.md"},D=e('<h1 id="关系数据库回顾" tabindex="-1">关系数据库回顾 <a class="header-anchor" href="#关系数据库回顾" aria-label="Permalink to &quot;关系数据库回顾&quot;">​</a></h1><blockquote><p>提纲要求：</p><p>1、数据模型和关系数据模型</p><p>2、SQL（了解即可，考试不考编写SQL）</p><p>3、<strong>三级模式结构</strong>与数据独立性</p></blockquote><h2 id="一、数据库系统体系结构" tabindex="-1">一、数据库系统体系结构 <a class="header-anchor" href="#一、数据库系统体系结构" aria-label="Permalink to &quot;一、数据库系统体系结构&quot;">​</a></h2><p>ANSI/SPARC体系结构——三级模式结构+两级映像</p><p>模式：模式是数据库中全体数据的逻辑结构和特征的描述，它仅仅涉及类型的描述，不涉及具体的值</p><h3 id="_1-1-三级模式结构" tabindex="-1">1.1 三级模式结构 <a class="header-anchor" href="#_1-1-三级模式结构" aria-label="Permalink to &quot;1.1 三级模式结构&quot;">​</a></h3><p><strong>1. 概念模式（模式、逻辑模式）</strong></p><ul><li>数据库中全体数据的逻辑结构和特征的描述 <ul><li>数据记录由哪些数据项构成</li><li>数据项的名字、类型、取值范围</li><li>数据之间的联系、数据的完整性等</li></ul></li><li>不涉及数据物理存储的细节和硬件环境</li><li>一个数据库只有一个概念模式？</li><li>概念视图：概念模式的实例</li><li>通过模式DDL进行定义</li></ul><p><strong>2. 内模式（存储模式）</strong></p><ul><li>数据物理结构和存储方式的描述 <ul><li>记录的存储方式：顺序存储、按B树组织还是散列存储？</li><li>索引按什么方式组织：排序、散列？</li><li>数据是否加密？是否压缩存储？</li></ul></li><li>不涉及物理块（或页）的大小，也不考虑具体设备 的柱面或磁道大小</li><li>一个数据库只有一个内模式</li><li>内部视图：内模式的实例</li><li>通过内模式DDL定义</li></ul><p><strong>3. 外模式（子模式、用户模式）</strong></p><ul><li>单个用户所看到的局部数据的逻辑结构和特 征的描述</li><li>用户与数据库系统的数据接口，对于用户而 言，外模式就是数据库</li><li>建立在概念模式之上，同一模式上可有多个 不同的外模式</li><li>外部视图：外模式的实例</li><li>通过子模式DDL进行定义</li></ul><p><img src="'+t+'" alt="image.png"></p><h3 id="_1-2-二级映像和数据独立性" tabindex="-1">1.2 二级映像和数据独立性 <a class="header-anchor" href="#_1-2-二级映像和数据独立性" aria-label="Permalink to &quot;1.2 二级映像和数据独立性&quot;">​</a></h3><p>二级映象实现三级模 式结构间的联系和转 换，使用户可以逻辑 地处理数据，不必关 系数据的底层表示方 式和存储方式。</p><p><img src="'+n+'" alt="image.png"></p><h4 id="外模式-模式-映象" tabindex="-1">外模式/模式 映象 <a class="header-anchor" href="#外模式-模式-映象" aria-label="Permalink to &quot;外模式/模式 映象&quot;">​</a></h4><p>定义了外模式与概念模式之间的对应关系</p><ul><li>属性名称可能不同</li><li>外模式中的属性可能由模式中的多个属性运算而 得</li></ul><p><strong>数据的逻辑独立性</strong>：当概念模式发生改变时，只要修改外模式/模 式映象，可保持外模式不变，从而保持用户 应用程序不变，保证了数据与用户程序的逻 辑独立性。（理解一下，就是逻辑模式可以随便变化，而不影响外模式，此所谓独立）</p><h4 id="模式-内模式-映象" tabindex="-1">模式/内模式 映象 <a class="header-anchor" href="#模式-内模式-映象" aria-label="Permalink to &quot;模式/内模式 映象&quot;">​</a></h4><p>定义了概念模式与内模式之间的对应关系</p><ul><li>概念模式中的逻辑记录和字段在内部如何表示</li></ul><p><strong>数据的物理独立性</strong>：当数据库的内部存储结构发生改变时，只要修改模式/内模式映象，可保持概念模式不变，从而保持外模式以及用户程序的不变，保 证了数据与程序的物理独立性。</p><p><img src="'+s+'" alt="image.png"></p><p><strong>SQL数据库的三级体系关系</strong></p><p><img src="'+p+'" alt="image.png"></p><h2 id="二、关系数据模型" tabindex="-1">二、关系数据模型 <a class="header-anchor" href="#二、关系数据模型" aria-label="Permalink to &quot;二、关系数据模型&quot;">​</a></h2><h3 id="_2-1-数据模型" tabindex="-1">2.1 数据模型 <a class="header-anchor" href="#_2-1-数据模型" aria-label="Permalink to &quot;2.1 数据模型&quot;">​</a></h3><p>数据模型是对现实世界数据特征的抽象</p><p><strong>数据模型的定义:</strong> 描述现实世界实体、实体间联系以及数据语义和一致性约束的模型</p><p><strong>数据模型的要素:</strong></p><ul><li>数据结构：现实世界实体及实体间联系的表示和实现</li><li>数据操作：数据检索和更新的实现</li><li>数据的完整性约束：数据及数据间联系应具有的制约和依赖规则（有点难理解）</li></ul><p><strong>数据模型的分类:</strong>（结构数据模型简称也叫做数据模型）</p><p>1. <strong>概念数据模型（概念模型）</strong></p><ul><li>按用户的观点对数据进行建模，强调语义表达功能</li><li>独立于计算机系统和DBMS</li><li>主要用于数据库的概念设计</li></ul><p>2. <strong>结构数据模型（数据模型）</strong></p><ul><li>按计算机系统的观点对数据进行建模，直接面向数据库 的逻辑结构</li><li>与计算机系统和DBMS相关（DBMS支持某种数据模型）</li><li>有严格的形式化定义，以便于在计算机系统中实现</li></ul><p><img src="'+o+`" alt="image.png"></p><h3 id="_2-2-关系模型" tabindex="-1">2.2 关系模型 <a class="header-anchor" href="#_2-2-关系模型" aria-label="Permalink to &quot;2.2 关系模型&quot;">​</a></h3><h4 id="_2-2-1-关系模型的定义" tabindex="-1">2.2.1 关系模型的定义 <a class="header-anchor" href="#_2-2-1-关系模型的定义" aria-label="Permalink to &quot;2.2.1 关系模型的定义&quot;">​</a></h4><p>用规范化的二维表格结构表示实体集，外码表示实体 间联系，三类完整性表示数据约束的数据模型。</p><ul><li>实体 ==&gt; 表、关系</li><li>实体间联系 ==&gt; 外码</li><li>数据约束 ==&gt; 三类完整性</li></ul><p>数据模型 =&gt; 结构数据模型 =&gt; 关系模型，也就是说关系模型是结构数据模型的一类。</p><p><strong>关系模型的形式化定义</strong></p><ul><li>数据结构：关系，数据库中全部数据及数据间联系都以关系 来表示</li><li>数据操作：关系运算，包括关系代数和关系演算（元组关系演算、域关系演算）</li><li>数据的完整性约束：关系模型的三类完整性约束</li></ul><h4 id="_2-2-2-三类码的定义" tabindex="-1">2.2.2 三类码的定义 <a class="header-anchor" href="#_2-2-2-三类码的定义" aria-label="Permalink to &quot;2.2.2 三类码的定义&quot;">​</a></h4><p><strong>（务必准确理解）</strong></p><ul><li>超码（Super Key） <ul><li>在关系中能唯一标识一个元组的属性集称为关系模式的超码（只要能唯一标识，加多少个属性都行）</li></ul></li><li>候选码（Candidate Key） <ul><li>不含多余属性的超码</li><li>包含在候选码中的属性称为主属性（Primary Attribute）（只要属性在某个候选码中，就是主属性）</li><li>不包含在任何一个候选码中的属性称为非主属性（Nonprime Attribute）</li></ul></li><li>主码（Primary Key） <ul><li>用户选作元组标识的一个候选码称为主码，其余的候选码称为替换码 （Alternate Key）</li></ul></li></ul><h4 id="_2-2-3-关系模式与关系数据库" tabindex="-1">2.2.3 关系模式与关系数据库 <a class="header-anchor" href="#_2-2-3-关系模式与关系数据库" aria-label="Permalink to &quot;2.2.3 关系模式与关系数据库&quot;">​</a></h4><p><strong>关系模式（Relation Schema）</strong></p><ul><li>关系的逻辑结构和特征的描述</li><li>对应于二维表格的表头</li><li>通常由属性集和各属性域表示，不关心域时可省略域 <ul><li><p>举例：Student（Name, Age, Class）</p><p><strong>关系</strong>：关系模式的实例，即二维表（元组的集合），理解一下就是一个关系就是一张表</p><p><strong>关系数据库模式</strong>（Relational Database Schema）：关系模式的集合。注意区别关系模式和模式</p><p><strong>关系数据库</strong>：关系数据库模式的实例</p></li></ul></li></ul><h4 id="_2-2-4-关系模式的形式化定义" tabindex="-1">2.2.4 关系模式的形式化定义 <a class="header-anchor" href="#_2-2-4-关系模式的形式化定义" aria-label="Permalink to &quot;2.2.4 关系模式的形式化定义&quot;">​</a></h4><p><strong>关系模式可以形式化定义</strong>：</p><p><strong>R(U，D，dom，F)</strong></p><ul><li>U ——属性集</li><li>D ——属性值所来自的域（就是数据类型和范围）</li><li>Dom ——属性和域之间的对应关系（属性到域的映射）</li><li>F ——属性之间的依赖关系（一般只考虑函数依赖）</li></ul><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Student(U, D, dom, F)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>U={sno, name, age}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>D={CHAR, INT}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Dom={dom(sno)=dom(name)=CHAR, dom(age)=INT}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>F={sno → name, sno → age}</span></span></code></pre></div><h4 id="_2-2-5-函数依赖" tabindex="-1">2.2.5 函数依赖 <a class="header-anchor" href="#_2-2-5-函数依赖" aria-label="Permalink to &quot;2.2.5 函数依赖&quot;">​</a></h4><p><strong>定义:</strong> 函数依赖(Functional Dependency, FD)是指一个 关系模式中一个属性集和另一个属性集间的多对一 关系</p><p><strong>逻辑蕴含和闭包（通俗理解，函数依赖集的闭包就是全部的能推出来的函数依赖）</strong></p><p><img src="`+r+'" alt="image.png"></p><p><strong>Armstrong 公理</strong></p><p><img src="'+c+'" alt="image.png"></p><p><strong>属性集的闭包</strong>（感觉很偏）：某属性集能推出（决定）的所有属性的集合</p><p><img src="'+g+'" alt="image.png"></p><p><img src="'+d+'" alt="image.png"></p><p><strong>最小函数依赖集</strong></p><p>当且仅当函数依赖集 F 满足下面条件时，F 是最小函 数依赖集：</p><ul><li>F 的每个FD的右边只有一个属性</li><li>F 不可约：F中的每个<code>X → Y，F－{X → Y}</code>与 F 不等价（<code>X → Y</code>不可或缺）</li><li>F 的每个FD的左部不可约：删除左边的任何一个属性都会 使F转变为一个不等价于原来的F的集合</li></ul><h4 id="_2-2-6-关系代数" tabindex="-1">2.2.6 关系代数 <a class="header-anchor" href="#_2-2-6-关系代数" aria-label="Permalink to &quot;2.2.6 关系代数&quot;">​</a></h4><p>关系模型中数据操作都通过关系代数表达式来表示。</p><p>难理解的：笛卡尔积（全组合）、选择（挑出横的几排）、投影（垂直划分，挑几个属性列）</p><p><img src="'+h+'" alt="image.png"></p><p><strong>三种联接</strong></p><ul><li>自然联结：相当于在R×S中选取R和S的所有公共属性值都相等的元 组，并在结果中去掉重复属性</li><li>θ联接：注意是从笛卡尔积里挑出满足条件的记录</li></ul><p><img src="'+u+'" alt="image.png"></p><ul><li>等值联接：θ联接中的条件为“=”号</li></ul><p><strong>删除、插入和修改</strong></p><p><img src="'+b+'" alt="image.png"></p><p><img src="'+m+'" alt="image.png"></p><p><img src="'+_+'" alt="image.png"></p><h4 id="_2-2-7-三类完整性" tabindex="-1">2.2.7 三类完整性 <a class="header-anchor" href="#_2-2-7-三类完整性" aria-label="Permalink to &quot;2.2.7 三类完整性&quot;">​</a></h4><p><strong>实体完整性（Entity Integrity）</strong></p><ul><li>关系模式R的主码不可以为空值</li></ul><p><strong>参照完整性（Referential Integrity）</strong></p><p><img src="'+f+'" alt="image.png"></p><ul><li>参照关系R的任意一个外码值要么为空，要么等于被参照关系S中所参照的候选码的某个值</li></ul><p><strong>用户自定义完整性（User-Defined Integrity）</strong></p><ul><li>针对某一具体数据的约束条件，反映某一具 体应用所涉及的数据必须满足的特殊语义 ，由应用环境决定（比如成绩限定在0-100分）</li></ul><h2 id="三、sql-不考写语句" tabindex="-1">三、SQL（不考写语句） <a class="header-anchor" href="#三、sql-不考写语句" aria-label="Permalink to &quot;三、SQL（不考写语句）&quot;">​</a></h2><p>SQL是用户与数据库的唯一接口，即数据库语言</p><p>三类：DDL, DCL, DML</p>',92),k=[D];function P(S,x,F,y,A,L){return i(),l("div",null,k)}const C=a(q,[["render",P]]);export{N as __pageData,C as default};
