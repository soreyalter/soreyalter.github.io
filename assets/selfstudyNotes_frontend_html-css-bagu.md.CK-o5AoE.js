import{_ as i,c as s,o as a,a4 as l}from"./chunks/framework.BBKq6QKo.js";const e="/selfstudy/frontend/html-css-bagu/BFC.png",t="/selfstudy/frontend/html-css-bagu/b5496131287390f0e7ae009b9b9c2347.png",y=JSON.parse('{"title":"HTML & CSS 八股","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"selfstudyNotes/frontend/html-css-bagu.md","filePath":"selfstudyNotes/frontend/html-css-bagu.md"}'),n={name:"selfstudyNotes/frontend/html-css-bagu.md"},h=l(`<h1 id="html-css-八股" tabindex="-1">HTML &amp; CSS 八股 <a class="header-anchor" href="#html-css-八股" aria-label="Permalink to &quot;HTML &amp; CSS 八股&quot;">​</a></h1><h2 id="css" tabindex="-1">css <a class="header-anchor" href="#css" aria-label="Permalink to &quot;css&quot;">​</a></h2><h3 id="flex布局" tabindex="-1">flex布局 <a class="header-anchor" href="#flex布局" aria-label="Permalink to &quot;flex布局&quot;">​</a></h3><h4 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h4><p>motivation：通过简单定义容器规则，尽可能不操作子元素（成为flex项目）</p><p>设置方式：给<strong>父</strong>元素设置 <strong>display: flex</strong>，子元素可以自动挤压或拉伸</p><ul><li>子元素会默认沿着主轴方向分布</li><li>父元素内放不下多个子元素时，会自动将子元素尺寸挤压变小以将所有子元素放入</li><li>当子元素的宽度或高度未设置时，该子元素尺寸会默认被设置为父元素的高度/宽度</li></ul><p>组成部分：</p><ul><li><strong>弹性容器 -</strong> 指的是父元素</li><li><strong>弹性盒子 -</strong> 指的是子元素</li><li><strong>主轴</strong>：默认在<strong>水平</strong>方向，从左到右</li><li><strong>侧轴 / 交叉轴</strong>：默认在<strong>垂直</strong>方向，从上到下</li></ul><h4 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性&quot;">​</a></h4><p>容器属性(5个)</p><ul><li><code>flex-direction</code> 设置主轴方向</li><li><code>justify-content</code> 设置项目在主轴上的对齐方式</li><li><code>align-items</code> 设置多行项目在其本行内的在交叉轴上的对齐方式 <ul><li>等同于批量设置项目的 <code>align-self</code> 属性</li><li>可以被 flex 项目的 <code>align-self</code> 属性覆盖</li></ul></li><li><code>flex-wrap</code> 是否换行</li><li><code>align-content</code> 设置项目在交叉轴上的对齐方式 <ul><li>多行对齐方式，单行无效，用浏览器检查工具中的图案记忆其与aligni-tems的区别</li></ul></li></ul><p>项目属性(5个)</p><p><code>flex-grow</code> 按给出比例瓜分本行剩余的空间拉长自己</p><ul><li>默认值：0，表示不增长</li></ul><p><code>flex-shrink</code> 按指定比例瓜分超出容器部分长度缩小自己</p><ul><li>默认值：1，表示等比例压缩本行所有的项目</li></ul><p><code>flex-basis</code> 项目初始宽度（或高度）</p><ul><li>默认值：auto，参照该项目的 width 和 height 属性</li></ul><div class="tip custom-block"><p class="custom-block-title">注意</p><p>当一个元素同时被设置了 <code>flex-basis</code> (除值为 <code>auto</code> 外) 和 <code>width</code> (或者在 <code>flex-direction: column</code> 情况下设置了 <code>height</code>) , <code>flex-basis</code> 具<strong>有更高的优先级</strong>。</p><p><code>flex-basis:auto</code> 的含义是 &quot;参照我的 <code>width</code> 和 <code>height</code> 属性&quot;。 根据内容赋予长度或者宽度的属性值是 <code>content</code> 属性。</p></div><p><code>order</code> 设置项目排序位置</p><p><code>align-item</code> 设置元素在自己行内的对齐方式</p><h3 id="水平垂直居中" tabindex="-1">水平垂直居中 <a class="header-anchor" href="#水平垂直居中" aria-label="Permalink to &quot;水平垂直居中&quot;">​</a></h3><ul><li>子绝父相 + 左上50%偏移 + <code>transform: translate(-50%, -50%)</code> 或者其他计算定位到中间</li><li>子绝父相 <code>block</code> + 上下左右偏移0 + <code>margin: auto</code></li><li>flex 布局: <code>align-items: center</code> + <code>justfy-content: center</code></li></ul><h3 id="响应式设计-rwd" tabindex="-1">响应式设计（RWD） <a class="header-anchor" href="#响应式设计-rwd" aria-label="Permalink to &quot;响应式设计（RWD）&quot;">​</a></h3><p>RWD 指的是允许 Web 页面适应不同屏幕宽度因素等，进行布局和外观的调整的一系列实践。</p><p><strong>需要你理解的很重要的一点是响应式 Web 设计不是单独的技术，它是描述 Web 设计的一种方式、或者是一组最佳实践的一个词，它是用来建立可以响应查看内容的设备的样式的一个词。</strong></p><h4 id="现代布局技术" tabindex="-1">现代布局技术 <a class="header-anchor" href="#现代布局技术" aria-label="Permalink to &quot;现代布局技术&quot;">​</a></h4><p>媒体查询（@midia）</p><p>灵活网格（float）</p><p>多列布局（column-）</p><p>flex布局</p><p>CSS网格（fr单位）</p><h4 id="响应式排版" tabindex="-1">响应式排版 <a class="header-anchor" href="#响应式排版" aria-label="Permalink to &quot;响应式排版&quot;">​</a></h4><p>rem</p><p>vw / vh</p><h4 id="盒子模型" tabindex="-1">盒子模型 <a class="header-anchor" href="#盒子模型" aria-label="Permalink to &quot;盒子模型&quot;">​</a></h4><p>盒子模型是 CSS 中的一个基本概念，是 CSS 设计和布局的基础标准之一。浏览器将网页中的元素当作一个一个的矩形块计算样式，布局并渲染，也就是盒子模型。</p><p>盒模型主要包含四个部分：内容区域、内边距、外边距和边框。</p><p>盒模型按照宽高属性包含的区域分为两种标准，分别对应 <code>box-sizing: content-box;</code> 和 <code>box-sizing: border-box</code></p><ul><li>W3C 标准盒模型：<code>width </code>和 <code>height</code> 仅包括内容区域</li><li>IE 怪异盒模型：<code>width</code> 和 <code>height</code> 包含内边距 <code>padding</code> 和边框 <code>border</code></li></ul><p><strong>块级格式化上下文（Block Formatting Context，BFC）</strong></p><p>是Web页面CSS 视觉渲染的一部分，是一个独立的布局环境，其中块级盒子按照一定的规则布局，并且与外部环境互不影响。也就是说 BFC 之间互相独立。</p><p>在BFC中，盒子垂直排列，并且盒子的垂直距离由 margin 决定。在BFC中，<strong>相邻的块级盒子之间的竖直外边距会发生叠加</strong>。但是，值得注意的是，在同一个BFC中的横向盒子不会合并外边距。</p><p>来自不同BFC的盒子其外边距则不会叠加。</p><p>创建 BFC 的条件包括但不限于（可以用于解决外边距合并）</p><ul><li>根元素<code>&lt;html&gt;</code></li><li>浮动元素（<code>float</code> 属性不是 <code>none</code>）</li><li>绝对定位元素（<code>absolute</code> 或者 <code>fixed</code>）</li><li>内联块（inline-block）</li><li><code>overflow </code>值不是 <code>visible</code></li><li>flex 或 grid 容器的直接子元素</li><li>contain 属性为 <code>layout</code>、<code>content</code> 或者 <code>paint</code> 的盒子</li></ul><p>更为直观的理解 BFC 之间的独立性：<strong>一个 BFC 不会显示到另一个 BFC 的区域中</strong>。以下是例子：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  .container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lightgray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  .float-box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">coral</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  .normal-box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">150</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lightblue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    overflow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hidden</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 触发BFC */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;container&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;float-box&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;normal-box&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>效果如图。不使用 <code>overflow: hidden;</code> 与使用该属性的有明显的不同，蓝色区域不会侵入浮动元素所在的 BFC.</p><p><img src="`+e+'" alt="BFC"></p><h2 id="html" tabindex="-1">HTML <a class="header-anchor" href="#html" aria-label="Permalink to &quot;HTML&quot;">​</a></h2><h3 id="link-和-href-和-src" tabindex="-1">link 和 href 和 src <a class="header-anchor" href="#link-和-href-和-src" aria-label="Permalink to &quot;link 和 href 和 src&quot;">​</a></h3><p>TODO</p><h3 id="html5-特性" tabindex="-1">HTML5 特性 <a class="header-anchor" href="#html5-特性" aria-label="Permalink to &quot;HTML5 特性&quot;">​</a></h3><h4 id="语义化标签" tabindex="-1">语义化标签 <a class="header-anchor" href="#语义化标签" aria-label="Permalink to &quot;语义化标签&quot;">​</a></h4><ul><li>header：定义文档的页眉（头部）</li><li>nav：定义导航链接的部分</li><li>footer：定义文档或节的页脚（底部）</li><li>article：定义文章内容</li><li>section：定义文档中的节（section、区段）</li><li>aside：定义其所处内容之外的内容（侧边）</li></ul><p><img src="'+t+'" alt="image.png"></p><h4 id="媒体标签" tabindex="-1">媒体标签 <a class="header-anchor" href="#媒体标签" aria-label="Permalink to &quot;媒体标签&quot;">​</a></h4><ul><li>audio 音频标签 <ul><li>constrols - 控制面板</li><li>autoplay - 自动播放</li><li>loop = &#39;true&#39; - 循环播放</li></ul></li><li>video 视频标签 <ul><li>poster - 封面图链接，默认是视频第一帧</li><li>constrols</li></ul></li><li>source 标签 <ul><li>这个标签是夹在 video 标签之间，用来指定视频源</li></ul></li></ul><h4 id="表单" tabindex="-1">表单 <a class="header-anchor" href="#表单" aria-label="Permalink to &quot;表单&quot;">​</a></h4><ul><li>表单类型</li><li>表单属性</li><li>表单事件：主要是 oninput</li></ul><h4 id="进度条、度量器" tabindex="-1">进度条、度量器 <a class="header-anchor" href="#进度条、度量器" aria-label="Permalink to &quot;进度条、度量器&quot;">​</a></h4><ul><li>progress 标签：表示任务进度</li><li>meter 属性：显示剩余容量</li></ul><h4 id="dom-查询操作" tabindex="-1">DOM 查询操作 <a class="header-anchor" href="#dom-查询操作" aria-label="Permalink to &quot;DOM 查询操作&quot;">​</a></h4><p>document.querySelector()</p><p>document.querySelectorAll()</p><h4 id="web-存储" tabindex="-1">Web 存储 <a class="header-anchor" href="#web-存储" aria-label="Permalink to &quot;Web 存储&quot;">​</a></h4><p>新增客户端存储方式：</p><p>localStorage - 没有时间限制的本地数据存储</p><p>sessionStorage</p><h4 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h4><ul><li>拖拽</li><li>canvas 画布标签</li><li>svg</li><li>地理定位</li><li>history API：go、forward、back、pushstate</li></ul>',73),o=[h];function p(d,r,k,c,E,g){return a(),s("div",null,o)}const b=i(n,[["render",p]]);export{y as __pageData,b as default};
