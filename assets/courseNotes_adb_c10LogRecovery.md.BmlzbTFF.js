import{_ as l,c as o,o as t,a4 as e}from"./chunks/framework.BGthqKqN.js";const i="/adb/chap10/0c4d5d0c0981777c14d9d2a852c0cd87.png",a="/adb/chap10/1e492a3fce5086c080ec37dbaab86546.png",r="/adb/chap10/2e0bbc725932249940169cab886a9e96.png",d="/adb/chap10/eca81bd7fe49649574de1f5dc0aaba36.png",n="/adb/chap10/f794f746324063daf2575fb5444419d4.png",u="/adb/chap10/746eb76ef1ce62b44cc2323083c349a0.png",v=JSON.parse('{"title":"日志和恢复","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"courseNotes/adb/c10LogRecovery.md","filePath":"courseNotes/adb/c10LogRecovery.md"}'),c={name:"courseNotes/adb/c10LogRecovery.md"},s=e('<h1 id="日志和恢复" tabindex="-1">日志和恢复 <a class="header-anchor" href="#日志和恢复" aria-label="Permalink to &quot;日志和恢复&quot;">​</a></h1><h2 id="_1、数据库的一致性概念" tabindex="-1">1、数据库的一致性概念 <a class="header-anchor" href="#_1、数据库的一致性概念" aria-label="Permalink to &quot;1、数据库的一致性概念&quot;">​</a></h2><ul><li>一致状态(Consistent state:)：满足所有完整性约束</li><li>一致数据库：满足一致状态的数据库</li><li>事务内部允许不保证DB的一致性</li></ul><h2 id="_2、事务的基本概念、acid和原子操作" tabindex="-1">2、事务的基本概念、ACID和原子操作 <a class="header-anchor" href="#_2、事务的基本概念、acid和原子操作" aria-label="Permalink to &quot;2、事务的基本概念、ACID和原子操作&quot;">​</a></h2><ul><li><strong>事务(transaction)概念</strong>：一个不可分割的操作序列，其中的操作要么 都做，要么都不做</li><li><strong>ACID</strong><ul><li><strong>原子性(Atomicity)</strong>: 事务是不可分的原子，其中的操作要么都做，要么都不做</li><li><strong>一致性(Consistency)</strong>: 事务的执行保证数据库从一个一致状态转到另一个一致状态</li><li><strong>隔离性(Isolation)</strong>: 多个事务一起执行时相互独立</li><li><strong>持久性(Durability)</strong>: 事务一旦成功提交，就在数据库永久保存</li></ul></li><li><strong>事务状态</strong><ul><li>开始 &lt;Start T&gt; 表示事务T开始</li><li>提交 &lt;Commit T&gt; 表示事务已经完成,并且写回磁盘持久化</li><li>丢弃 &lt;Abort T&gt; T事物中断,所有修改取消</li></ul></li><li><strong>原语操作</strong><ul><li><code>Input(x)</code>: disk block with x → memory</li><li><code>Output(x)</code>: buffer block with x → disk</li><li><code>Read(x, t)</code><ul><li>do input(x) if necessary</li><li>t ← value of x in buffer</li></ul></li><li><code>Write(x, t)</code><ul><li>do input(x) if necessary</li><li>value of x in buffer ← t</li></ul></li></ul></li></ul><p><img src="'+i+'" alt="image.png"></p><h2 id="_3、wal的概念" tabindex="-1">3、WAL的概念* <a class="header-anchor" href="#_3、wal的概念" aria-label="Permalink to &quot;3、WAL的概念\\*&quot;">​</a></h2><p>Write Ahead Logging 先写日志：在数据被写到磁盘之前，对应此修改的日志记录必须已被写到磁盘上</p><h2 id="_4、undo日志、redo日志、undo-redo日志" tabindex="-1">4、Undo日志、Redo日志、Undo/Redo日志* <a class="header-anchor" href="#_4、undo日志、redo日志、undo-redo日志" aria-label="Permalink to &quot;4、Undo日志、Redo日志、Undo/Redo日志\\*&quot;">​</a></h2><p>概述</p><p><img src="'+a+'" alt="image.png"></p><p>日志类型包括:Undo日志、Redo日志、Undo/Redo日志</p><h3 id="undo日志-t-x-old-value" tabindex="-1">Undo日志&lt;T, x, old-value&gt; <a class="header-anchor" href="#undo日志-t-x-old-value" aria-label="Permalink to &quot;Undo日志\\&lt;T, x, old-value\\&gt;&quot;">​</a></h3><h4 id="机制" tabindex="-1">机制 <a class="header-anchor" href="#机制" aria-label="Permalink to &quot;机制&quot;">​</a></h4><ul><li>在 Flash Log之前，日志仅存于内存中，还没有写到磁盘</li><li>当对应的修改发生之前（Output）写到磁盘中（WAL）</li><li>内存Commit也不算，Commit写到磁盘上才算成功</li></ul><p><img src="'+r+'" alt="image.png"></p><p>注意下图中，write后内存中<strong>未</strong>产生commit日志，且后续先 Output 才 Flash Log 将 commit 日志写回磁盘（和redo日志不同）</p><p><img src="'+d+'" alt="image.png"></p><h4 id="恢复" tabindex="-1">恢复 <a class="header-anchor" href="#恢复" aria-label="Permalink to &quot;恢复&quot;">​</a></h4><ul><li>从头扫描日志，找出所有没有 &lt;Commit, T&gt;或&lt;Abort, T&gt;的所有事务，放 入一个事务列表L中</li><li>从尾部开始扫描日志记录&lt;T, x, v&gt;,如果T∈ L（从后往前undo），把X写为old value <ul><li><code>write(X, v)</code></li><li><code>output(X)</code></li></ul></li><li><code>For each T ∈ L do(添加Abort日志)</code><ul><li><code>write &lt;Abort, T &gt; to log</code></li></ul></li></ul><h3 id="redo日志-t-x-new-value" tabindex="-1">Redo日志&lt;T, x, new-value&gt; <a class="header-anchor" href="#redo日志-t-x-new-value" aria-label="Permalink to &quot;Redo日志\\&lt;T, x, new-value\\&gt;&quot;">​</a></h3><h4 id="机制-1" tabindex="-1">机制 <a class="header-anchor" href="#机制-1" aria-label="Permalink to &quot;机制&quot;">​</a></h4><p>注意一点不同：在数据写回磁盘前<strong>先写</strong>&lt;Commit, T&gt;日志 记录！！也就是说先 Flash Log 再 Output</p><p><img src="'+n+'" alt="image.png"></p><p>下图中 write之后内存中已产生 commit 日志</p><p><img src="'+u+'" alt="image.png"></p><h4 id="恢复-1" tabindex="-1">恢复 <a class="header-anchor" href="#恢复-1" aria-label="Permalink to &quot;恢复&quot;">​</a></h4><ul><li>从头扫描日志，找出所有有&lt;Commit,T&gt; 的事务，放入一个事务列表L中</li><li>从首部开始扫描日志记录&lt;T,x,v&gt;,如果T∈ L，则（从前往后redo，把X写为new value） <ul><li><code>write (X, v)</code></li><li><code>output (X)</code></li></ul></li><li><code>For each T∈ L do（添加 Abort 日志）</code><ul><li><code>write &lt;Abort, T&gt; to log</code></li></ul></li></ul><p><strong>redo日志恢复的特点</strong></p><p><strong>commit != 写回磁盘！！！</strong></p><ul><li>没有&lt;Commit,T&gt;记录的操作必定没有改写磁 盘数据，因此在恢复时可以不理会</li><li>有&lt;Commit,T&gt;记录的结果可能还未写回磁盘 ，因此在恢复时要Redo</li></ul><p>在undo日志中，commit 必然已经已写回磁盘</p><h3 id="undo-redo日志-t-x-old-value-new-value" tabindex="-1">Undo/Redo日志&lt;T, x, old-value, new-value&gt; <a class="header-anchor" href="#undo-redo日志-t-x-old-value-new-value" aria-label="Permalink to &quot;Undo/Redo日志\\&lt;T, x, old-value, new-value\\&gt;&quot;">​</a></h3><ul><li><strong>Undo基于立即更新(Immediately Update) ——</strong><ul><li>write 后立即Output 把数据更新到磁盘中</li><li>也可以延迟更新，但这样undo的优点发挥不出来</li><li>乐观：内存代价小，恢复代价高</li></ul></li><li><strong>Redo基于延迟更新(Deferred Update)</strong><ul><li>等所有要处理的变量都write后，在事务末尾才output更新到磁盘中</li><li>悲观：恢复代价小，内存代价高</li></ul></li></ul><h4 id="基于undo-redo日志的恢复" tabindex="-1">基于Undo/Redo日志的恢复 <a class="header-anchor" href="#基于undo-redo日志的恢复" aria-label="Permalink to &quot;基于Undo/Redo日志的恢复&quot;">​</a></h4><p>既可以延迟更新也可以立即更新</p><ul><li>正向扫描日志，将&lt;commit&gt;的事务放入 Redo列表中，将没有结束的事务放入 Undo列表</li><li>反向扫描日志，对于&lt;T,x,v,w&gt;，若T在 Undo列表中，则（先Undo） <ul><li>Write(x,v); Output(x)</li></ul></li><li>正向扫描日志，对于&lt;T,x,v,w&gt;，若T在 Redo列表中，则（后Redo） <ul><li>Write(x,w)； Output(x)</li></ul></li><li>对于Undo列表中的T，写入&lt;abort,T&gt;</li></ul><h2 id="_5、checkpoint" tabindex="-1">5、Checkpoint <a class="header-anchor" href="#_5、checkpoint" aria-label="Permalink to &quot;5、Checkpoint&quot;">​</a></h2><p><strong>简单检查点</strong>，到达检查点时间时：</p><ul><li>中止接受新的事务</li><li>等待所有正在进行的事务完成（提交/中止）</li><li>将所有日志记录刷新到磁盘（日志）</li><li>将所有缓冲区刷新到磁盘（数据库）</li><li>在磁盘上写入“检查点”记录（日志）</li><li>恢复事务处理</li></ul><p>检查点技术保证检查点之前的所有<strong>commit</strong>操作的 结果已写回数据库，在恢复时不需REDO</p><p>日志轮转：把已经比较老的失效日志归档到廉价磁盘或者磁带</p>',42),h=[s];function p(g,m,b,_,x,f){return t(),o("div",null,h)}const q=l(c,[["render",p]]);export{v as __pageData,q as default};
